@startuml
'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
'skinparam linetype orto

skinparam classAttributeIconSize "2"
class Employee extends User{
    -salary
}
enum Roles{

}
class User{
    - name
    - descriptions
    - tax number
    - address
    - email address
    - phone number
    - password
    - roles

}

class Repositories {
    - Repositories()
    + getInstance() : Repositories
    + getStoreRepository()
}

class AnnouncementRepositorie{
}

class CreateStoreUI{
}

class CreateEmployeeUI{
}

class CreateEmployeeController{
    + CreateEmployeeController(StoreRepository)
    + createEmployee(name,descriptions,tax number,address\n,email address,phone number,password,store,roles)
}

class CreateAnnouncementUI{
}

class CreateAnnouncementController{
    + createAnnouncement(Property, commission, Employee)
}
class Announcement{
    -Property
    -commission
    -Employee
}

class RealEstate{
    - String name
    - String address
    - String descriptions
    - String website
    - String phoneNumber
    - String e-mail
    - String vatNumber
}

class Administrator extends User{
}

class Store{
    + Store(designation, phoneNumber, \n e-mail, vatNumber, address,branchNumber)
    + validate()
    - Int branchNumber
    - String designation
    - String address
    - String phoneNumber
    - String e-mail
    - String vatNumber
    - Employee manager

}

class StoreRepository{
    - List<Store> storeList
    + validate(store)

}

class CreateStoreUI{
}

class CreateStoreController{
   + getEmployee()
   + getOwnerOfProperty()
   + createProperty(Owner, type, address, description, cost, vender, render, PropertyData)
}

class CreateGuestUI{
}

class CreateGuestController{

}

class Client extends User{
}

abstract class Property {
    - name
    - Tipo
    - address
    - descriptions
    - vender:boolean
    - render:boolean
}

class Repositories {
    - Repositories()
    + getInstance() : Repositories
    + getPropertyRepository()
    + getOwnerRepository()
    + getEmployeeRepository()

}

class PropertyRepository {
    - PropertyRepository()
    + getInstance() : PropertyRepository
    + addProperty(Property property)
    + getProperty(String name)
    + getProperties()
    + removeProperty(String name)
    + updateProperty(String name, Property property)
}

class ClientRepository {
    - OwnerRepository()
    + getInstance() : OwnerRepository
    + addOwner(Owner owner)
    + getOwner(String name)
    + getOwners()
    + removeOwner(String name)
    + updateOwner(String name, Owner owner)
}

class House extends Property{
    - numberOfRooms
    - numberOfBathrooms
    - numberOfFloors
    - numberOfGarages
    - Equipaments
    - Basement: boolean
    - inhabited  loft: boolean
    - Sun exposure: boolean
}
class Apartment extends Property{
    - numberOfRooms
    - numberOfBathrooms
    - numberOfFloors
    - numberOfGarages
    - Equipaments

}
class Land extends Property{
    - area
}

Repositories .. StoreRepository
Repositories .. PropertyRepository
Repositories .. ClientRepository
Repositories .. AnnouncementRepositorie
Repositories .. CreateEmployeeController
Repositories .. CreateStoreController
Repositories .. CreateAnnouncementController
Repositories .. CreateGuestController
User --> Roles :has >

'client
Client --> Property :has >
Store "1"--> "*" Employee :has >
'Controller
CreateAnnouncementController ..> CreateAnnouncementUI
CreateEmployeeController ..> CreateEmployeeUI
CreateStoreController ..> CreateStoreUI
CreateGuestController ..> CreateGuestUI

StoreRepository "1"--> "*" Store :has >
PropertyRepository "1"--> "*" Property :has >
ClientRepository "1"--> "*"Client :has >
AnnouncementRepositorie "1"--> "*" Announcement :has >
CreateEmployeeController ..>  StoreRepository

StoreRepository ..> Store : Onde guarda os dados do employee
@enduml