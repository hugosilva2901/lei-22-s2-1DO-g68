@startuml

skinparam monochrome false
skinparam packageStyle rectangle
skinparam shadowing true
top to bottom direction


class Repositories {
  - Repositories():
  ~ propertyRepository: PropertyRepository
  ~ authenticationRepository: AuthenticationRepository
  ~ clientRepository: ClientRepository
  - instance: Repositories
  ~ announcementRepository: AnnouncementRepository
  ~ storeRepository: StoreRepository
   announcementRepository: AnnouncementRepository
   propertyRepository: PropertyRepository
   instance: Repositories
   clientRepository: ClientRepository
   authenticationRepository: AuthenticationRepository
   storeRepository: StoreRepository
}

class PropertyRepository {
  + PropertyRepository():
  + remove(Property): boolean
  + getByName(String): Optional<Property>
  + createApartment(String, String, String, boolean, boolean, int, int, int, int, List<String>): void
  + createLand(String, String, String, boolean, boolean, double): void
  + createHouse(String, String, String, String, boolean, boolean, int, int, int, int, List<String>, boolean, boolean, boolean): void
  + creatLand(String, String, String, String, boolean, boolean, double): Optional<Land>
  + add(Property): void
  + creatApartment(String, String, String, String, boolean, boolean, int, int, int, int, List<String>): Optional<Apartment>
  + creatHouse(String, String, String, String, boolean, boolean, int, int, int, int, List<String>, boolean, boolean, boolean): Optional<House>
   all: List<Property>
}

class Apartment {
  + Apartment(String, String, String, String, boolean, boolean, int, int, int, int, List<String>):
  - numberOfBathrooms: int
  - numberOfGarages: int
  - numberOfRooms: int
  - numberOfFloors: int
  - equipments: List<String>
   numberOfFloors: int
   numberOfGarages: int
   equipments: List<String>
   numberOfRooms: int
   numberOfBathrooms: int
}

class House {
  + House(String, String, String, String, boolean, boolean, int, int, int, int, List<String>, boolean, boolean, boolean):
  - hasBasement: boolean
  - numberOfBathrooms: int
  - numberOfRooms: int
  - numberOfGarages: int
  - hasLoft: boolean
  - numberOfFloors: int
  - equipments: List<String>
  - hasSunExposure: boolean
  + hasBasement(): boolean
  + hasLoft(): boolean
  + hasSunExposure(): boolean
   numberOfGarages: int
   hasLoft: boolean
   equipments: List<String>
   numberOfRooms: int
   hasSunExposure: boolean
   numberOfFloors: int
   hasBasement: boolean
   numberOfBathrooms: int
}

class Land {
  + Land(String, String, String, String, boolean, boolean, double):
  - area: double
   area: double
}

class Property {
  + Property(String, String, String, String, boolean, boolean):
  - description: String
  - type: String
  - isForSale: boolean
  - address: String
  - isForRent: boolean
  - name: String
   name: String
   description: String
   isForSale: boolean
   type: String
   isForRent: boolean
   address: String
}

class ClientRepository {
  + ClientRepository():
  ~ clients: List<Client>
  - validateClient(Client): void
  + addClient(String, String, int, String, String, String, String, Roles): Optional<Client>
  + removeClient(Client): boolean
  + getClientByTaxNumber(int): Client
  + addPropertyToClient(Client, Property): void
   clients: List<Client>
}

class Client {
  + Client(String, String, int, String, String, String, String, Roles):
  - properties: List<Property>
  - validateTaxNumber(int): void
  + addProperty(Property): void
  - validateOwner(String, String, int, String, String, String, String, Roles): void
   properties: List<Property>
}

class User {
  + User(String, String, int, String, String, String, String, Roles):
  - phone: String
  - name: String
  - email: String
  - address: String
  - taxNumber: int
  - descptions: String
  - roles: Roles
  - password: String
  + toString(): String
   name: String
   password: String
   descptions: String
   email: String
   phone: String
   address: String
   roles: Roles
   taxNumber: int
}

enum Roles << enumeration >> {
  + Roles():
  + values(): Roles[]
  + valueOf(String): Roles
}

class AcceptOrderUI{
  - controller
  + void run()
  - displayAndSelectAnnouncement()
  - void displayAnnouncementOptions(List<AnnouncementDTO> announcements)
  - displayAndSelectOrder()
  - displayOrderOptions()
}


class OrderRepository{
  ~ List<order>
  - void addOrder(order order)
  - void PutPerorder()
  + List<OrderDTO>
  - boolean valueAlreadyExists
  - boolean clientAlreadyExists
  + Optional<OrderDTO> createOrder
  + List<OrderDTO> OrderOfTheAgent
  - order findOrder()
  + void acceptOrder()
  + void rejectOrder()
}

class AcceptOrderController{
  + AcceptOrderController()
  - OrderRepository getOrderRepository()
  - StoreRepository getStoreRepository()
  - AnnouncementRepository getAnnouncementRepository()
  - MessagesOfClientRepository getMessagesOfClientRepository()
  ~ List<AnnouncementDTO>
  - EmployeeProjectDTO
  ~ List<OrderDTO>
  + void acceptOrder()
}

class OrderMapper{
    +OrderMapper():
    +mapToDTO(Order): OrderDTO
    +mapToEntity(OrderDTO): Order
}

class OrderDTO{
    - value: int
    -Announcement: Announcement
    -Client: Client
}

class Order{
    - value: int
    -Announcement: Announcement
    -Client: Client
}

class MessagesOfClientRepository


User "1" --> AcceptOrderUI
AcceptOrderUI --> AcceptOrderController
AcceptOrderController --> OrderRepository
AcceptOrderController --> MessagesOfClientRepository
MessagesOfClientRepository --> Client
AcceptOrderController --> PropertyRepository
User "1" *--> "roles\n1" Roles
Order "1" --> "*" User : has a client >
ClientRepository "1" *--> "clients\n*" Client
PropertyRepository           "1" *--> "apartments\n*" Apartment
PropertyRepository           "1" *--> "houses\n*" House
PropertyRepository           "1" *--> "lands\n*" Land
OrderRepository "1" --> "*" Order : has >
OrderRepository "1" --> "*" OrderMapper : Uses >
OrderMapper "1" --> "*" OrderDTO : creates >
Repositories -->  ClientRepository : "«create»"
Repositories -->  PropertyRepository : "«create»"
Repositories -->  OrderRepository : "«create»"
Repositories -->  MessagesOfClientRepository : "«create»"
Apartment                     --^  Property
House                         --^  Property
Land                          --^  Property

@enduml