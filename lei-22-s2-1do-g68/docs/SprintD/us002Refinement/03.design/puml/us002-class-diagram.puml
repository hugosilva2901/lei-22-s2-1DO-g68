@startuml
skinparam monochrome false
skinparam packageStyle rectangle
skinparam shadowing true
top to bottom direction

skinparam classAttributeIconSize "2"

class House{
  + House(String, String, String, String, boolean, boolean, int, int, int, int, List<String>, boolean, boolean, boolean):
  - hasBasement: boolean
  - numberOfBathrooms: int
  - numberOfRooms: int
  - numberOfGarages: int
  - hasLoft: boolean
  - numberOfFloors: int
  - equipments: List<String>
  - hasSunExposure: boolean
  + hasBasement(): boolean
  + hasLoft(): boolean
  + hasSunExposure(): boolean
   numberOfGarages: int
   hasLoft: boolean
   equipments: List<String>
   numberOfRooms: int
   hasSunExposure: boolean
   numberOfFloors: int
   hasBasement: boolean
   numberOfBathrooms: int
}
class Apartment{
  + Apartment(String, String, String, String, boolean, boolean, int, int, int, int, List<String>):
  - numberOfBathrooms: int
  - numberOfGarages: int
  - numberOfRooms: int
  - numberOfFloors: int
  - equipments: List<String>
   numberOfFloors: int
   numberOfGarages: int
   equipments: List<String>
   numberOfRooms: int
   numberOfBathrooms: int
}
class Land{
  + Land(String, String, String, String, boolean, boolean, double):
  - area: double
   area: double
}
abstract class Property {
  + Property(String, String, String, String, boolean, boolean):
  - description: String
  - type: String
  - isForSale: boolean
  - address: String
  - isForRent: boolean
  - name: String
   name: String
   description: String
   isForSale: boolean
   type: String
   isForRent: boolean
   address: String
}

class Repositories {
  - Repositories():
  ~ propertyRepository: PropertyRepository
  ~ authenticationRepository: AuthenticationRepository
  ~ clientRepository: ClientRepository
  - instance: Repositories
  ~ announcementRepository: AnnouncementRepository
  ~ storeRepository: StoreRepository
   announcementRepository: AnnouncementRepository
   propertyRepository: PropertyRepository
   instance: Repositories
   clientRepository: ClientRepository
   authenticationRepository: AuthenticationRepository
   storeRepository: StoreRepository
}
class CreateAnnouncementUI{
  + CreateAnnouncementUI():
  - controller: CreateAnnouncementController
  - displayAndSelectClients(): Client
  - displayClients(List<Client>): void
  - submitData(): void
  - requestData(): void
  - requestComission(): int
  + run(): void
  - displayAndSelectProperty(Client): Property
  - displayClientProperty(List<Property>): void
   controller: CreateAnnouncementController
}

class CreateAnnouncementController{
  + CreateAnnouncementController():
  + CreateAnnouncementController(ClientRepository, PropertyRepository, AnnouncementRepository, AuthenticationRepository):
  - announcementRepository: AnnouncementRepository
  - propertyRepository: PropertyRepository
  - clientRepository: ClientRepository
  - authenticationRepository: AuthenticationRepository
  + createAnnouncement(Property, int): Optional<Announcement>
   clientRepository: ClientRepository
   authenticationRepository: AuthenticationRepository
   announcementRepository: AnnouncementRepository
   propertyRepository: PropertyRepository
}
class PropertyRepository{
  + PropertyRepository():
  + remove(Property): boolean
  + getByName(String): Optional<Property>
  + createApartment(String, String, String, boolean, boolean, int, int, int, int, List<String>): void
  + createLand(String, String, String, boolean, boolean, double): void
  + createHouse(String, String, String, String, boolean, boolean, int, int, int, int, List<String>, boolean, boolean, boolean): void
  + creatLand(String, String, String, String, boolean, boolean, double): Optional<Land>
  + add(Property): void
  + creatApartment(String, String, String, String, boolean, boolean, int, int, int, int, List<String>): Optional<Apartment>
  + creatHouse(String, String, String, String, boolean, boolean, int, int, int, int, List<String>, boolean, boolean, boolean): Optional<House>
   all: List<Property>
}

class Client extends user{
  + Client(String, String, int, String, String, String, String, Roles):
  - properties: List<Property>
  - validateTaxNumber(int): void
  + addProperty(Property): void
  - validateOwner(String, String, int, String, String, String, String, Roles): void
   properties: List<Property>
}

class EmployeeProject extends user{
  + EmployeeProject(String, String, int, String, String, String, String, Roles[], int, Store):
  - salary: int
  - validateTaxNumber(int): void
  - validateStore(Store): void
  - validateEmployee(String, String, int, String, String, String, String, Roles[], int, Store): void
  - validateSalary(int): void
   salary: int
}

class user{
  + User(String, String, int, String, String, String, String, Roles):
  - phone: String
  - name: String
  - email: String
  - address: String
  - taxNumber: int
  - descptions: String
  - roles: Roles
  - password: String
  + toString(): String
   name: String
   password: String
   descptions: String
   email: String
   phone: String
   address: String
   roles: Roles
   taxNumber: int
}

enum roles{
  + Roles():
  + values(): Roles[]
  + valueOf(String): Roles
}

class Announcement{
  + Announcement(Property, int):
  - commission: int
  - property: Property
  + validateAnnouncement(Announcement): void
   commission: int
   property: Property
}

class ClientRepository{
  + ClientRepository():
  ~ clients: List<Client>
  - validateClient(Client): void
  + addClient(String, String, int, String, String, String, String, Roles): Optional<Client>
  + removeClient(Client): boolean
  + getClientByTaxNumber(int): Client
  + addPropertyToClient(Client, Property): void
   clients: List<Client>
}

class MessagesOfClientRepository {
  - messages: Map<Client, List<String>>
  - messagesOfEmployee: Map<EmployeeProject, List<String>>
  - MessageOfVisitByEmail: Map<String, List<String>>

  + addMessage(Client client, String message): void
  + getMessage(Client client): List<String>
  + addMessageOfVisit(String email, String message): void
}

CreateAnnouncementUI .> CreateAnnouncementController
CreateAnnouncementController .> Repositories : repositories
Repositories "1" --> "*" PropertyRepository : has >
PropertyRepository "1" --> "*" Property : has >
Repositories "1" --> "*" MessagesOfClientRepository : has >
House  --|>  Property  : is
Apartment  --|>  Property : is
Land  --|>  Property : is
Client "1"--"0.*" Property: owns
user "1"--"1..*" roles : has >
EmployeeProject "1"--"1..*" Announcement : publish >
CreateAnnouncementController ..> "1" Announcement : Announcement
ClientRepository "1" --> "*" Client : has >
Client "1" --> "0.*" Announcement : request >

@enduml