@startuml
'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
'skinparam linetype orto

skinparam classAttributeIconSize "2"
'left to right direction
class Repositories {
  - Repositories():
  ~ propertyRepository: PropertyRepository
  ~ authenticationRepository: AuthenticationRepository
  ~ clientRepository: ClientRepository
  - instance: Repositories
  ~ announcementRepository: AnnouncementRepository
  ~ storeRepository: StoreRepository
   announcementRepository: AnnouncementRepository
   propertyRepository: PropertyRepository
   instance: Repositories
   clientRepository: ClientRepository
   authenticationRepository: AuthenticationRepository
   storeRepository: StoreRepository
}

class ListAnnouncementRequestUI {

}


class User {
  + User(String, String, int, String, String, String, String, Roles):
  - phone: String
  - name: String
  - email: String
  - address: String
  - taxNumber: int
  - descptions: String
  - roles: Roles
  - password: String
  + toString(): String
   name: String
   password: String
   descptions: String
   email: String
   phone: String
   address: String
   roles: Roles
   taxNumber: int
}
enum Roles << enumeration >> {
  + Roles():
  + values(): Roles[]
  + valueOf(String): Roles
}


class EmployeeProject extends User{
  + EmployeeProject(String, String, int, String, String, String, String, Roles[], int, Store):
  - salary: int
  - validateTaxNumber(int): void
  - validateStore(Store): void
  - validateEmployee(String, String, int, String, String, String, String, Roles[], int, Store): void
  - validateSalary(int): void
   salary: int
}

class Administrator extends User{
  - Admin():
  - instance: Admin
   instance: Admin
}

class Announcement{
  + Announcement(Property, int):
  - commission: int
  - property: Property
  + validateAnnouncement(Announcement): void
   commission: int
   property: Property
}

class AnnouncementRepository{
  + AnnouncementRepository():
  ~ announcements: List<Announcement>
  + createAnnouncement(Property, int): Optional<Announcement>
  + addAnnouncement(Announcement): void
  + removeAnnouncement(Announcement): boolean
}


class CreateAnnouncementController {
  + CreateAnnouncementController():
  + CreateAnnouncementController(ClientRepository, PropertyRepository, AnnouncementRepository, AuthenticationRepository):
  - announcementRepository: AnnouncementRepository
  - propertyRepository: PropertyRepository
  - clientRepository: ClientRepository
  - authenticationRepository: AuthenticationRepository
  + createAnnouncement(Property, int): Optional<Announcement>
   clientRepository: ClientRepository
   authenticationRepository: AuthenticationRepository
   announcementRepository: AnnouncementRepository
   propertyRepository: PropertyRepository
}

class AnnouncementDTO{
    - value: int
    -Announcement: Announcement
    -Client: Client
}
class AnnouncementMapper{
    +AnnouncementMapper():
    +mapToDTO(Announcement): AnnouncementDTO
    +mapToEntity(AnnouncementDTO): Announcement
}

ListAnnouncementRequestUI .> CreateAnnouncementController
User "1"--"1..*" Roles : has >
Administrator --> EmployeeProject : createdBy
EmployeeProject "1"--"1..*" Announcement : publish >
CreateAnnouncementController .> Repositories : repositories
CreateAnnouncementController ..> "1" Announcement : Announcement
Repositories "1" --> "*" AnnouncementRepository : has >
AnnouncementRepository "1" --> "*" AnnouncementMapper : Uses >
AnnouncementMapper "1" --> "*" AnnouncementDTO : creates >

@enduml