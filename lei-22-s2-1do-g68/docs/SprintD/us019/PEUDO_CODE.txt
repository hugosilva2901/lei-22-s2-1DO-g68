function calculatePartitions(stores):
    n = length(stores)
    totalPartitions = 2^n
    partitions = new Array[totalPartitions - 2][n]

    partitionIndex = 0
    for i = 1 to totalPartitions - 1:
        subset1 = new Array[n/2]
        subset2 = new Array[n/2]
        subset1Index = 0
        subset2Index = 0

        for j = 0 to n - 1:
            if (i & (1 << j)) > 0:
                subset1[subset1Index] = stores[j]
                subset1Index = subset1Index + 1
            else:
                subset2[subset2Index] = stores[j]
                subset2Index = subset2Index + 1

        partitions[partitionIndex] = subset1
        partitionIndex = partitionIndex + 1
        partitions[partitionIndex] = subset2
        partitionIndex = partitionIndex + 1

    return partitions


function findMinPartition(partitions):
    minDifference = infinity
    minPartition = []

    for each partition in partitions:
        sort partition in descending order based on property counts

        sumSubset1 = 0
        sumSubset2 = 0
        for i = 0 to length(partition) - 1:
            if i is even:
                sumSubset1 = sumSubset1 + partition[i].propertyCount
            else:
                sumSubset2 = sumSubset2 + partition[i].propertyCount

        difference = absolute(sumSubset1 - sumSubset2)
        if difference < minDifference:
            minDifference = difference
            minPartition = partition

    return minPartition
